plugins {
    id 'org.springframework.boot' version '2.1.8.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
    id 'com.bmuschko.docker-spring-boot-application' version '5.1.0'
}




group = 'com.maint.calc'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "Greenwich.SR3")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.0.2'
    // https://mvnrepository.com/artifact/io.springfox/springfox-swagger2
    compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }


}

docker {
    springBootApplication {
        baseImage = 'openjdk:8-alpine'
        ports = [9090, 8082]
        tag = 'maint:suma-micro'
        jvmArgs = ['-Dspring.profiles.active=production', '-Xmx2048m']
    }
}



/*tasks.create('createDockerfile', Dockerfile) {
    from('openjdk:jre-alpine')
    copyFile('suma-0.0.1-SNAPSHOT.jar', '/app/my-app-1.0.jar')
    entryPoint('java')
    defaultCommand('-jar', '/app/my-app-1.0.jar')
    exposePort(8080)
}*/

/*
task copyJar(type: Copy) {
    group = 'Docker'
    from file("$buildDir/libs/suma-0.0.1-SNAPSHOT.jar")
    into file("$buildDir/docker")
}*/

/*task buildImage(type: DockerBuildImage) {
    //dependsOn createDockerfile, copyJar
    inputDir = file('build/docker')
    tags.add('cmendoza/suma:latest')
}*/
/*
task pushImage(type: DockerPushImage) {
    group = 'Docker'
    dependsOn buildImage
    conventionMapping.imageName = { buildImage.getTag() }
}

String getConfigurationProperty(String envVar, String sysProp) {
    System.getenv(envVar) ?: project.findProperty(sysProp)
}*/
